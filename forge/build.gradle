plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // SimpleVoiceChat dependencies
    modRuntimeOnly "maven.modrinth:simple-voice-chat:forge-${voicechat_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version,
        "min_minecraft_version": min_mc_version,
        "voicechat_api_version": voicechat_api_version,
        "min_architectury_version": min_architectury_version,
        "min_forge_loader_version": min_forge_version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar

    if (minecraft_version == min_mc_version) {
        archiveAppendix.set("forge-${minecraft_version}")
    } else {
        archiveAppendix.set("forge-${min_mc_version}-${minecraft_version}")
    }

    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

curseforge {
    apiKey = file("${rootDir}/curseforge_api_key.txt").exists() ? file("${rootDir}/curseforge_api_key.txt").text : ''
    project {
        id = "825621"
        changelogType = 'markdown'
        changelog = file("${rootDir}/changelog.md")
        releaseType = release_type
        addGameVersion minecraft_version
        addGameVersion 'Forge'
        mainArtifact(remapJar) {
            if (minecraft_version == min_mc_version) {
                displayName = "[FORGE][${minecraft_version}] Walkie-Talkie ${mod_version}"
            } else {
                displayName = "[FORGE][${min_mc_version}-${minecraft_version}] Walkie-Talkie ${mod_version}"
            }
            relations {
                requiredDependency 'simple-voice-chat'
                requiredDependency 'architectury-api'
            }
        }
    }
}

tasks.modrinth.configure({
    group = 'upload'
})

modrinth {
    token = file("${rootDir}/modrinth_token.txt").exists() ? file("${rootDir}/modrinth_token.txt").text : ''
    projectId = "yaRitiLw"
    versionNumber = "forge-${mod_version}"
    if (minecraft_version == min_mc_version) {
        versionName = "[FORGE][${minecraft_version}] Walkie-Talkie ${mod_version}"
    } else {
        versionName = "[FORGE][${min_mc_version}-${minecraft_version}] Walkie-Talkie ${mod_version}"
    }
    uploadFile = remapJar
    versionType = release_type.toUpperCase()
    changelog = file("${rootDir}/changelog.md").text
    gameVersions = [minecraft_version]
    loaders = ['forge']
    dependencies {
        required.project '9eGKb6K1' // simple-voice-chat
        required.project 'lhGA9TYQ' // architectury-api
    }
}
tasks.modrinth.dependsOn(build)

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}